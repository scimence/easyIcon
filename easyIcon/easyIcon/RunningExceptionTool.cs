// Generated by .NET Reflector from E:\SVN\workSpace\easyIcon_20200309\easyIcon_dll_无图像\easyIcon\bin\Debug\dll\sciUpdate.dll
namespace SciUpdate
{
    using System;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Threading;
    using System.Windows.Forms;
    
    public class RunningExceptionTool
    {
        private static ExceptionMsg Excall = null;
        private static string StringDatas104 = "oilpjaoikbimoflmicoflili$oilpjaoikbimoflmicoflilioplmimogipjaoelkkegchfghoelpkbogibkpoplmjp$gfhi$gcgbgdglfdhehc$ckckckckckckckckckckckckckckckckckckckckckckckckckckckckoflmicoflilioelpkbogibkpckckckckckckckckckckckckckckckckckckckckckckckckckckckck$odiajaofihlkohiolaogjhlgojjhleodiajboplmjk$hjhjhjhjcnenencngegecagigidkgngndkhdhd$odiajaoflmicofliliohlbllofjoilodiajboplmjk$odiajaoflmicoflilioelpkbogibkpodiajboplmjk$odiajaofkaigogkaiioilaidohjekiodiajboplmjk$odiajaoflmicofliliogjgljogldjfodiajboplmjk$odiajaogjmkkofkeieohjaigoflmicofliliodiajboplmjk$ckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckckck";
        private static string[] StringDatas104A = null;
        
        private static void CatchThreadException(object sender, ThreadExceptionEventArgs e)
        {
            string exceptionMsg = GetExceptionMsg(e.Exception, e.ToString());
            MessageBox.Show(exceptionMsg, ecodsra102(0), MessageBoxButtons.OK, MessageBoxIcon.Hand);
            if (Excall != null)
            {
                Excall(exceptionMsg);
            }
        }
        
        private static void CatchUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            string exceptionMsg = GetExceptionMsg(e.ExceptionObject as Exception, e.ToString());
            MessageBox.Show(exceptionMsg, ecodsra102(0), MessageBoxButtons.OK, MessageBoxIcon.Hand);
            if (Excall != null)
            {
                Excall(exceptionMsg);
            }
        }
        
        private static string ecodsra102(int index105)
        {
            if (StringDatas104A == null)
            {
                StringDatas104A = StringDatas104.Split(new char[] { '$' });
            }
            string data = StringDatas104A[index105];
            return Sci.EncoderXXX.DecodeAlphabet(data);
        }
        
        private static string GetExceptionMsg(Exception ex, string backStr)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine(ecodsra102(4));
            builder.AppendLine(ecodsra102(5) + DateTime.Now.ToString(ecodsra102(6)));
            if (ex != null)
            {
                builder.AppendLine(ecodsra102(7) + ex.GetType().Name);
                builder.AppendLine(ecodsra102(8) + ex.Message);
                builder.AppendLine(ecodsra102(9) + ex.StackTrace);
                builder.AppendLine(ecodsra102(10) + ex.TargetSite);
            }
            else
            {
                builder.AppendLine(ecodsra102(11) + backStr);
            }
            builder.AppendLine(ecodsra102(12));
            return builder.ToString();
        }
        
        public static void Run(MainFunction main, ExceptionMsg ExCall = null, string[] args = null)
        {
            try
            {
                if (Excall != null)
                {
                    Excall = ExCall;
                }
                Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);
                Application.ThreadException += new ThreadExceptionEventHandler(RunningExceptionTool.CatchThreadException);
                AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(RunningExceptionTool.CatchUnhandledException);
                if (main != null)
                {
                    if (args == null)
                    {
                        main(null);
                    }
                    else
                    {
                        main(args);
                    }
                }
            }
            catch (Exception exception)
            {
                string exceptionMsg = GetExceptionMsg(exception, string.Empty);
                MessageBox.Show(exceptionMsg, ecodsra102(0), MessageBoxButtons.OK, MessageBoxIcon.Hand);
                if (Excall != null)
                {
                    Excall(exceptionMsg);
                }
            }
        }
        
        public delegate void ExceptionMsg(string msg);
        
        public delegate void MainFunction(string[] argsl = null);


        ///// <summary>  
        ///// 解析字母字符串  
        ///// </summary>  
        //public static string DecodeAlphabet(string data)
        //{
        //    byte[] B = ToBytes(data);
        //    return Encoding.UTF8.GetString(B);
        //}

        ///// <summary>  
        ///// 解析字符串为Bytes数组
        ///// </summary>  
        //public static byte[] ToBytes(string data)
        //{
        //    byte[] B = new byte[data.Length / 2];
        //    char[] C = data.ToCharArray();

        //    for (int i = 0; i < C.Length; i += 2)
        //    {
        //        byte b = ToByte(C[i], C[i + 1]);
        //        B[i / 2] = b;
        //    }

        //    return B;
        //}

        ///// <summary>  
        ///// 每两个字母还原为一个字节  
        ///// </summary>  
        //private static byte ToByte(char a1, char a2)
        //{
        //    return (byte)((a1 - 'a') * 16 + (a2 - 'a'));
        //}
    }
}
